"use strict";(self.webpackChunkcoders=self.webpackChunkcoders||[]).push([[769],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>y});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,y=c["".concat(s,".").concat(u)]||c[u]||m[u]||i;return a?n.createElement(y,l(l({ref:t},d),{},{components:a})):n.createElement(y,l({ref:t},d))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5453:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:3},l="Data type",o={unversionedId:"tutorial-jssp/datatype",id:"tutorial-jssp/datatype",title:"Data type",description:"JSSP data types contain more types than data types in common programming languages. It is largely divided into domain types, primitive data types, and generic types.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/tutorial-jssp/datatype.md",sourceDirName:"tutorial-jssp",slug:"/tutorial-jssp/datatype",permalink:"/en/docs/tutorial-jssp/datatype",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"@ grammar",permalink:"/en/docs/tutorial-jssp/jssp_at_syntax"},next:{title:"struct type",permalink:"/en/docs/tutorial-jssp/datatype-struct"}},s={},p=[{value:"Domain",id:"domain",level:2},{value:"Example",id:"example",level:3},{value:"Constant type",id:"constant-type",level:2},{value:"Example",id:"example-1",level:3},{value:"Primitive data type",id:"primitive-data-type",level:2},{value:"Example",id:"example-2",level:3},{value:"Generic type",id:"generic-type",level:2},{value:"Example",id:"example-3",level:3}],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-type"},"Data type"),(0,r.kt)("p",null,"JSSP data types contain more types than data types in common programming languages. It is largely divided into domain types, primitive data types, and generic types."),(0,r.kt)("h2",{id:"domain"},"Domain"),(0,r.kt)("p",null,"The domain data type in JSSP is a type used in databases, and is distinct from general data types. Since the domain type is a type used in databases, it classifies data more strictly. For example, integer, bigint, varchar(32), char(32), double, float, etc."),(0,r.kt)("p",null,"Since the domain data type must strictly classify the data stored in the database, JSSP defined it as a type called domain, and it can be used in entity class types and query syntax."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[comment='User ID']\ndomain UserID varchar(32);\n\n[comment='User Password']\ndomain Password varchar(512);\n\n[comment=\"Item type\"]\ndomain ItemType integer;\n\n[comment=\"Item Id\"]\ndomain ItemID bigint;\n\n[comment='User Email']\ndomain Email varchar(128);\n\n[comment='User Nickname']\ndomain AccessToken varchar(512);\n")),(0,r.kt)("p",null,"In the above example, several domain data types are defined, and each domain represents information related to a specific user or item. These definitions make the interaction with the database clearer and can improve the readability of the code."),(0,r.kt)("h2",{id:"constant-type"},"Constant type"),(0,r.kt)("p",null,"A constant is a value that does not change in programming. Constants usually have identifiable names and are used for readability and clarity of meaning. You can use constants, and constants are defined as:"),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"[comment='Android type']\nconstant DeviceTypeAndroid = 1;\n\n[comment='iOS type']\nconstant DeviceTypeIos = 2;\n")),(0,r.kt)("p",null,"In the example above, two constants, ",(0,r.kt)("inlineCode",{parentName:"p"},"DeviceTypeAndroid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DeviceTypeIos")," are defined, and 1 and 2 are assigned as values \u200b\u200brespectively. Constants allow you to avoid magic numbers within your code and clarify the meaning of your code. Defining constants is useful for improving the reusability and maintainability of code."),(0,r.kt)("h2",{id:"primitive-data-type"},"Primitive data type"),(0,r.kt)("p",null,"Primitive data types used in JSSP are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"char: character type"),(0,r.kt)("li",{parentName:"ul"},"int16: 16-bit integer type"),(0,r.kt)("li",{parentName:"ul"},"int32: 32-bit integer type"),(0,r.kt)("li",{parentName:"ul"},"float: real number type"),(0,r.kt)("li",{parentName:"ul"},"double: double-precision real type"),(0,r.kt)("li",{parentName:"ul"},"string: string type"),(0,r.kt)("li",{parentName:"ul"},"file: Special types for handling files"),(0,r.kt)("li",{parentName:"ul"},"formfile: A special type for transferring files over HTTP. Converted to FormFile class at API design time")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"file myFile;\nformfile uploadFile;\n")),(0,r.kt)("h2",{id:"generic-type"},"Generic type"),(0,r.kt)("p",null,"JSSP supports generic types for handling collections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"list: ordered list type"),(0,r.kt)("li",{parentName:"ul"},"set: set type with no duplicates"),(0,r.kt)("li",{parentName:"ul"},"map: A map type that stores key-value pairs")),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"list<int32> numbers;\nmap<string, int32> keyValuePairs;\n")),(0,r.kt)("p",null,"These data types provide the tools you need to efficiently implement various data structures and algorithms while writing code."))}m.isMDXComponent=!0}}]);